Iniciamos o projeto na pasta alura-books-server
npm init -y
instalamos o express
npm install express
fiz o procedimento para o github e criamos o primeiro arquivo
app.js e importamos o express
como ele não colocou o type:module no package.json usaremos o
este formato de importação em todo o projeto
const express = require("express")
logo na sequência ele cria um servidor chamando
const app = express()
vamos agora configurar nosso servidor
definimos uma porta
const port = 8000
e fazemos a primeira rota

app.get('/', (req, res) => {
    res.send("Beleza...")
})

e depois deixamos o servidor escutando na porta

app.listen(port, ()=>{
    console.log(`Escutando a porta ${port}`)
})

roda o projeto com node app.js

npm install nodemon para usar o hot reload com nodemon
coloquei "dev": "nodemon app.js" no scripts do package.json
para rodar agora, npm run dev

vamos trabalhar as rotas... criamos uma pasta rotas e um arquivo livro.js

Importamos Router do express e criamos uma instância para trabalhar

const { Router } = require("express")

const router = Router()

agora é só definir as rotas de livros aqui dentro

começamos de forma simples definindo um get para '/'
perceba que ainda não se falou sobre livros ainda...
isso vai acontecer no app.js
Assim está livro.js
const { Router } = require("express")

const router = Router()

router.get('/', (req, res) => {
    res.send("Beleza pura...")
})

module.exports = router

e assim está app.js

const express = require("express")
const rotaLivro = require("./rotas/livro")

const app = express()

app.use('/livros', rotaLivro)

const port = 8000

app.listen(port, ()=>{
    console.log(`Escutando a porta ${port}`)
})

define-se rotaLivro e com app.use('/livros', rotaLivro)
definimos que ela está associada a /livros....

massa demais...

Inicialmente vamos definir os demais métodos apenas retornando textos simples...
os métodos ficarão praticamente iguais...

const { Router } = require("express")

const router = Router()

router.get('/', (req, res) => {
    res.send("Usando o método get")
})

router.post('/', (req, res) => {
    res.send("Usando o método post")
})

router.patch('/', (req, res) => {
    res.send("Usando o método patch")
})

router.delete('/', (req, res) => {
    res.send("Usando o método delete")
})

module.exports = router

testamos com o postman e deu tudo certo

vamos usar try-catch para lidar com erros
vou mostrar aqui o get....
o throw new Error("teste") simula um erro... foi apenas para testar se devolve 0 500 mesmo...

router.get('/', (req, res) => {
    try {
        throw new Error("teste")
        res.send("Usando o método get")

    } catch (error) {
        res.status(500)
        res.send(error.message)
    }
})

Vai continuar sem ele...

router.get('/', (req, res) => {
    try {
        res.send("Usando o método get")

    } catch (error) {
        res.status(500)
        res.send(error.message)
    }
})


replicando para os demais metódos o try-catch

vamos agora criar controladores para separar as responsabilidades...

criamos a pasta controladores e nela um aquivo livro.js

cada função callback que está em rotas, será trazida para o controlador...

function getLivros (req, res) {
    try {
        res.send("Usando o método get")

    } catch (error) {
        res.status(500)
        res.send(error.message)
    }
}

function postLivro (req, res) {
    try {
        res.send("Usando o método post")

    } catch (error) {
        res.status(500)
        res.send(error.message)
    }
}

module.exports = {
    getLivros,
    postLivro
}

o rotas será simplificado...

const { Router } = require("express")
const { getLivros, postLivro, patchLivro, deleteLivro } = require("../controladores/livro")

const router = Router()

router.get('/', getLivros)

router.post('/', postLivro)

router.patch('/', patchLivro)

router.delete('/', deleteLivro)

module.exports = router

simples assim... excelente....

Vamos agora criar um livros.json que vai funcionar como bbanco de dados

[
    {
        "id": "1",
        "nome": "Livro irado"
    },
    {
        "id": "2",
        "nome": "Livro muito legal"
    }
]

vamos usar o fs para manipular arquivos

const fs = require("fs")

vamos usar o readFileSync para ler arquivos e o writeFileSync para escrever arquivos

Para isso vamos alterar os controladores e criar os serviços

o controlador ficou assim para o get

const fs = require("fs")

function getLivros (req, res) {
    try {
        const livros = JSON.parse(fs.readFileSync("livros.json"))
        res.send(livros)
    } catch (error) {
        res.status(500)
        res.send(error.message)
    }
}

Mas o controlador não deve ser responsável por ler o arquivo...
criaremos um serviço para fazer isso...

vamos criar a pasta servicos e um arquivo livro.js

vamos criar uma função para cada verbo http que usaremos
começando pelo getTodosLivros

const fs = require("fs")

function getTodosLivros() {
    return JSON.parse(fs.readFileSync("livros.json"))
}

module.exports = {
    getTodosLivros
}

O controlador agora chama essa função no serviço

o serviço é reponsável por ler o arquivo
o controlador é responsável por enviar erro ou sucesso

const { getTodosLivros } = require("../servicos/livro")

function getLivros (req, res) {
    try {
        const livros = getTodosLivros()
        res.send(livros)
    } catch (error) {
        res.status(500)
        res.send(error.message)
    }
}

Vamos criar agora um get por id

Começaremos nas rotas criar um endpoint para isso...

router.get('/:id', getLivro)

Neste ponto não precisamos passar o parâmetro... isso será feito no controlador....
aqui apenas associamos a rota à função do controlador....
A função do controlador ficou assim...

function getLivro (req, res) {
    try {
        const id = req.params.id
        const livro = getLivroPorId(id)
        res.send(livro)
    } catch (error) {
        res.status(500)
        res.send(error.message)
    }
}

Aqui neste ponto é que pegamos o parâmetro....
Claro que é necessário exportar essa função...

module.exports = {
    getLivros,
    getLivro,
    postLivro,
    patchLivro,
    deleteLivro
}

Agora vamos construir a função do service...

function getLivroPorId(id) {
    const livros = JSON.parse(fs.readFileSync("livros.json"))
    const livro = livros.filter(livro => livro.id === id)
    return livro
}

E também é necessário exportar....

module.exports = {
    getTodosLivros,
    getLivroPorId
}

Entretanto, dessa maneira livro está sendo uma lista com um elemento...

[
    {
        "id": "2",
        "nome": "Livro muito legal"
    }
]

Para que a resposta fique apenas com um elemento, colocamos [0] no final....

const livro = livros.filter(livro => livro.id === id)[0]

{
    "id": "2",
    "nome": "Livro muito legal"
}

Simples e tranquilo...

Vamos fazer o post agora....
e para isso vamos precisar usar o body...

no postman a gente precisar configurar o body para raw e mudar para json

e a gente segue o mesmo fluxo... rotas... controlador... serviço....

Rota está assim....
router.post('/', postLivro)

Controlador está assim...

function postLivro (req, res) {
    try {
        const livroNovo = req.body
        insereLivro(livroNovo)
        res.status(201)
        res.send("Livro criado com sucesso")
    } catch (error) {
        res.status(500)
        res.send(error.message)
    }
}

E o service está assim....

function insereLivro(livroNovo) {
    const livros = JSON.parse(fs.readFileSync("livros.json"))
    const livrosAtualizados = [...livros, livroNovo]
    fs.writeFileSync("livros.json", JSON.stringify(livrosAtualizados))
}

Esta maneira de criar uma nova lista se chama spread...
tudo o que está em livros será adicionado a livrosAtualizados e depois livroNovo será inserido...
Muito bacanaaaaaa.....

Mas tudo isso só vai funcionar se adicionarmos um middleware no arquivo app.js....

app.use(express.json())

Isso informa que o body vai receber os dados no formato json...
super importante isso...
caso não seja feito, o que vai ser inserido no banco vai ser null


